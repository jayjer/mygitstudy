# 克隆
git clone [url]
==========================
# 克隆等同的操作手段
#将一个空文件夹初始化为git文件夹
git init
# 添加远程仓库
git remote add [仓库名] [仓库的url]
# 可以查看远程仓库 （-v 远程的仓库）
git remote -v
# 拉取远程仓库相关的最新文件
git pull [前面添加的远程仓库名字] [对应的仓库的分支名]
# 查看本地相关的分支
git branch
# 查看远程仓库的分支 
git branch -r
#查看远程仓库的更多信息
git remote show [remote-name]
#远程仓库的重命名
git remote rename [old-name] [new-name]
#远程仓库的删除
git remote rm [remote-name]
# 拉取当前远程分支的数据
git fetch [remote-name]
==========================
@@基本的提交等操作
# 加入暂存区
git add [filename]
# 查看当前的git的状态
git status
# 查看git的提交的相关的日志
git log --pretty =oneline
# 删除对应的文件（这样执行直接回在暂存区添加修改）
git rm  [filename]
# 重命名对应的文件（这样执行直接回在暂存区添加修改）
git mv  [filename] [filename]
# 将提交的暂存区域的文件 还原为未暂存
git reset HEAD [filename]
#这边是将修改的文件（还没进入暂存区域的文件即无状态的时候）放弃所有的修改的（慎用）
git checkout -- [filename]
#撤销所有本地更改（未被跟踪的文件） 慎用
git checkout .
# 将对应的提交提交在本地库中 
git commit 
git commit -m "注释内容"
如果是非新加的文件（就是受到git控制的文件）这边直接加上-a 就可以直接省略 git add
git commit -a -m "comments"
可以实现这次提的注释修改为上次提交的提交的注释
git commit --amend
# 将本地提交提交到远程库中
git push -u origin master
#回滚到指定分支
git reset --hard [版本hash-code]
====================================================================================
git diff 文件对比
#工作区与暂存区比较
git diff  [filename]
#工作区与HEAD ( 当前工作分支) 比较
git diff HEAD [filename]
#暂存区与HEAD比较
git diff --staged 或 --cached  [filename]
#当前分支的文件与branchName 分支的文件进行比较
git diff branchName [filename]
#与某一次提交进行比较
git diff commitId [filename]
====================================================================================
#查看历史
git log
相关的显示参数介绍如下
1. -p：按补丁显示每个更新间的差异，比下一条- -stat命令信息更全
2. --stat：显示每次更新的修改文件的统计信息，每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计
3. --shortstat：只显示--stat中最后的行数添加修改删除统计
4. --name-only：尽在已修改的提交信息后显示文件清单
5. --name-status：显示新增、修改和删除的文件清单
6. --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符
7. --relative-date：使用较短的相对时间显示（例如："two weeks ago"）
8. --graph：显示ASCII图形表示的分支合并历史
9. --pretty＝：使用其他格式显示历史提交信息，可选项有：oneline,short,medium,full,fuller,email,raw以及format:还有相关的规则表达式
10. --date= (relative|local|default|iso|rfc|short|raw)：定制后边如果出现%ad或%cd时的日期格式
相关的过滤参数介绍如下
1.按数量 -n 显示前n条log
2.按日期 --after="2019-1-2"显示日期之后的提交 --before=[日期] 显示该日期之前的提交 后边的日期还可以用相对时间表示，比如"1 week ago"和”yesterday"
3.按作者 --author="jay" 作者名不需要精确匹配，只需要包含就行了,而且：可以使用正则表达式,而且：这个--author不仅包含名还包含email
4.按commit描述 --grep="[匹配内容]" 而且：可以传入-i用来忽略大小写
5.按文件 -- [文件名]  另外，后边的路径还支持正则
6.按分支 git log v1 -- v1 代表v1分支下的v1文件
7.按内容 -S"<string>"、-G"<string>" 有时你想搜索和新增或删除某行代码相关的commit. 可以使用这条命令 -G 代表的是开启正则表达式的比较
8.按范围 git log <since>..<until> 这个命令可以查看某个范围的commit 命令非常有用当你使用branch做为range参数的时候. 能很方便的显示2个branch之间的不同
9.过滤掉merge commit 使用命令 --no-merges
10.按标签tag  git log v1.0 直接这样是查询标签之前的commit
11.按commit  git log commit ：查询commit之前的记录，包含commit git log commit1 commit2：查询commit1与commit2之间的记录，包括commit1和commit2
git log commit1..commit2：同上，但是不包括commit1 其中，commit可以是提交哈希值的简写模式，也可以使用HEAD代替  HEAD 表示最后一次提交
====================================================================================
#git 打标签相关的操作
#列出标签
git tag
#筛选列出标签
git tag -l 'v1.8.5
#新建标签
git tag [tagname]  用于新建一个标签，默认为HEAD，也可以指定一个commit id
#查看标签信息
git show [tagname]
#在提交版本时候可以直接指定标签
git tag -a [tagname] -m "提交的注释"
共享标签
#将本地标签推送当远程共享对应的标签
git push origin [tagname]
#一次性推送很多标签
git push origin --tags
#删除本地仓库的tag
git tag -d [tagname]
#删除远程仓库的tag
git push origin :refs/tags/[del-tagname] 通过先删除对应的本地仓库的tag 然后在使用这条命令 将对应的更新推送给远程
====================================================================================
别名定义
# 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名
#git config --global alias.unstage 'reset HEAD --'  后面可以通过 git unstage [filename] 来实现对应的将暂存变为为暂存
git config --global alias.last 'log -1 HEAD' 查看最后一次提交
====================================================================================
Git 分支操作
git 分支简略介绍
git在提交的时候，提交的节点包含3个对象，文件快照对象，树结构对象，提交信息对象。
@@本地分支的相关操作
# 查看本地相关的分支
git branch  (如果想查看全部的本地分支，包括本地创建的对应的远程分支的时候使用的是"git branch -a")
#创建新本地分支
git branch [branch-name]
#删除本地分支
git branch -d [branch-name] 这边是删除的时候如果有变更没有合并的时候，会报错 is not fully merged 可以使用强制删除git branch -D [branch-name] 
#你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。
git --oneline --decorate
#切换分支使用
git checkout [branch-name]
@@当第一次创建分支的时候，此时当前分支中有文件修改(当未被跟踪或者暂存)，这时候如果直接执行checkout 切换分支，对应的修改也会到且切换的分支。
@@这边有个注意事项是在操作本地分支的时候,（新建文件）当未被跟踪的文件或者暂存文件，会随着分支的切换，跟随进入对应的分支。
如果这时候使用 git commit -a -m "" 操作的时候会直接在该分支下提交，所以要注意这样的情况。在切换分支时候保持，
当前分支下status 是干净的时候在进行相关的切换操作。
如果是修改文件，git会强制要求你在切换分支的时候进行当前修改的提交，否则是无法进行分支切换的。
##分支的时候经常的查看当前分支的状况的使用的命令行
git log --oneline --decorate --graph -all 这边会显示相关的树形结构
#创建同时切换到对应的分支
git checkout -b  [branch-name]
#查看每个分支的最后一次提交信息。
git branch -v
#查看合并过的分支
git branch --merged
#查看未合并的分支
git branch --no-merged
#合并相关的分支 
//参考网址https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
git merge [branch-name]
如果当前分支在master，使用 git merge [branch-name] 该命令就是将[branch-name]分支中的修改合并进master分支
@@ （快进）在合并的时候，你应该注意到了"快进（fast-forward）"这个词。 由于当前 master 分支所指向的提交是你当前提交
（有关 [branch-name] 的提交）的直接上游，所以 Git 只是简单的将指针向前移动。 换句话说，当你试图合并两个分支时，
如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进（指针右移），
因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”。
@@（合并递交）你的开发分支在很早的工作分支就分叉开来（diverged）的时候。 因为master 分支所在提交并不是 [branch-name]分支
所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照,
以及这两个分支的工作祖先（即2个分支节点相交的节点），做一个简单的三方合并。和之前将分支指针向前推进所不同的是，
Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，
它的特别之处在于他有不止一个父提交。
@@遇到冲突时的分支合并, 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。
此时 Git 做了合并，但是没有自动地创建一个新的合并提交。Git 会暂停下来，等待你去解决合并产生的冲突。 
你可以在合并冲突后的任意时刻使用 git status 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件。
然后你就可以进行相关的文件的修改，并将修改的文件，使用git add [file-name] 来进行暂存。 当确定冲突的文件都解决的时候，
使用git commit 来进行相关的提交。这时候master 分支的内容就会和对应的分支合并完成。
@@远程分支相关操作
#更新你的远程仓库引用
git fetch [remote-name]

#回滚到指定分支（这边使用的是hard模式 会覆盖本地的修改）
git reset --hard [版本hash-code]

@@创建远程分支的时候，
如果使用的是 git remote add [远程仓库别名] [远程仓库的地址] 这是看只是建立了远程分支别名，本地还未有remotes/[远程仓库别名]/master 对应的分支。
在使用 git pull [远程仓库别名] 或者使用的 git fetch [远程仓库别名] 的时候才会建立对应的remotes/[远程仓库别名]/master 对应的分支

同一个本地git路径 可以对应不同的远程库 ，相互不会干预，
这边主要通过添加远程仓库，然后使用git checkout 来切换，进行对不同的远程仓库进行操作。

#本地分支跟踪远程分支的设定
git branch --set-upstream-to=[remote-name]/[branch-name]

#在创建分支的时候同时设定跟踪分支
git checkout --track [remote-name]/[branch-name] -b [local-branch-name]

#删除远程分支
git push [remote-name] --delete [branch-name]








